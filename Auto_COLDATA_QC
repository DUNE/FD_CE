"""
Filename: Auto_CODLATA_QC.py
Author: Taylor Contreras (Based on Shanshan Gao's DAT_COLDATA_QC_ana.py)
Date: 2025-06-13
Description: This script includes functions to run QC/QA testing of 
             COLDATA chips automatically, without user input. 
"""

import sys 
import os
import subprocess
import time 
import datetime
import random
import pickle
from DAT_read_cfg import dat_read_cfg_auto
import filecmp
from colorama import just_fix_windows_console
just_fix_windows_console()
from DAT_chk_cfgfile import dat_chk_cfgfile_auto
from set_rootpath import rootdir_cs
#import colorama
#from colorama import Fore, Back
#colorama.init(autoreset=True)

wibip = "192.168.121.123"
wibhost = "root@{}".format(wibip)

from rts_ssh import subrun
from rts_ssh import rts_ssh
from rts_ssh import DAT_power_off

####### Colors for terminal output #######
#Red = '\033[91m'
#Green = '\033[92m'
#Blue = '\033[94m'
#Cyan = '\033[96m'
#White = '\033[97m'
#Yellow = '\033[93m'
#Magenta = '\033[95m'
#Grey = '\033[90m'
#Black = '\033[90m'
#Default = '\033[99m'

def DAT_QC(rootdir, dut_skt, duttype="FE",  env="RT" ):
    """
    Runs rts_ssh and returns the results successful.
    """

    QCresult = rts_ssh(dut_skt, root=rootdir, duttype=duttype, env=env, auto=True)
    if QCresult != None:
        QCstatus = QCresult[0]
        badchips = QCresult[1]
    else:
        print('Error, QCresult empty')
        exit()

    return QCstatus, badchips #badchips range from 0 to7

def RunCOLDATA_QC(duttype, env, rootdir):
    """
    
    Inputs:
        duttype [str]: type of chip to test (FE, ADC, CD)
        env: [str]: environment to run tests in room temp or cold (RT, LT)
        rootdir [str]: directory for outputing results
    """

    print("\033[96m Root folder of test data is: "+ "\033[93m" + rootdir + "\033[0m")

    pc_wrcfg_fn = "./asic_info.csv"

    # Checking WIB connection
    print("\033[0m ", datetime.datetime.utcnow(), " : Check if WIB is pingable (it takes < 60s)" )
    timeout = 10 
    command = ["ping", wibip]
    print("\033[92m ", "COMMAND:", command)
    for i in range(6):
        result = subrun(command=command, timeout=timeout, exitflg=False)
        if i == 5:
            print("\033[91m " + "Please check if WIB is powered and Ethernet connection,exit anyway")
            exit()
        log = result.stdout
        chk1 = "Reply from {}: bytes=32".format(wibip)
        chk2p = log.find("Received =")
        chk2 =  int(log[chk2p+11])
        if chk1 in log and chk2 >= 1:  #improve it later
            print("\033[0m ", datetime.datetime.utcnow(), "\033[92m  : SUCCESS!  \033[0m")
            break

    # Check configuration file
    command = ["notepad.exe", pc_wrcfg_fn]
    result=subrun(command, timeout = None, check=False)
    pf= dat_chk_cfgfile_auto(fcfg = pc_wrcfg_fn, duttype=duttype )
    if not pf:
        print("Error with config file.")
        exit()

    # Get the current time
    now = datetime.datetime.utcnow()
    dut0 = int(now.strftime("%Y%m%d%H%M%S"))&0xFFFFFFFFFFFFFFFF

    ################STEP1#################################
    skts=[0,1,2,3,4,5,6,7]
    dut_skt = {str(dut0):(0,1), str(dut0+1):(0,2), str(dut0+2):(0,3), str(dut0+3):(0,4), str(dut0+4):(0,5), str(dut0+5):(0,6), str(dut0+6):(0,7), str(dut0+7):(0,8) }
    QCstatus, badchips = DAT_QC(rootdir, dut_skt, duttype, env) 

    if "PASS" in QCstatus :
        print(QCstatus)
        print("\033[92m " + "Well done, please move chips back to tray." +"\033[0m")
    elif ("Code#E001" in QCstatus) or ("Terminate" in QCstatus) :
        print(QCstatus, badchips)
        DAT_power_off()
        print("\033[93m " + "Please contact the tech coordinator" +"\033[0m")
    elif "Code#" in QCstatus:
        DAT_power_off()
        print(QCstatus, badchips)
        if len(badchips) > 0:
            for bc in badchips:
                print("\033[93m " + "chip%d (1-8) is bad, please move it to bad tray and replace it with a new chip"%(bc+1) +"\033[0m")
            print("\033[93m " +"please restart the test script" +"\033[0m" )
        else:
            print("\033[93m " +"Please contact the tech coordinator" +"\033[0m")

    return